<?phpclass Model {    public $db;    public $html;    public $_tabela;    protected $host;    protected $port;    protected $username;    protected $dbname;    protected $password;    public function __construct() {        $this->host = Database::$host;        $this->port = Database::$port;        $this->username = Database::$username;        $this->dbname = Database::$dbname;        $this->password = Database::$password;        try {            $this->db = new pdo("mysql:host={$this->host};dbname={$this->dbname}", "$this->username", "$this->password", array(PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION));        } catch (PDOException $ex) {            try {                $this->db = new pdo("mysql:host={$this->host}:{$this->port};dbname={$this->dbname}", "$this->username", "$this->password", array(PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION));            } catch (PDOException $ex) {                die();            }        }    }    private function showColumns() {        $q = $this->db->query("SHOW COLUMNS FROM `{$this->_tabela}`");        if ($q->rowCount()) {            while ($rows = $q->fetch(PDO::FETCH_OBJ)) {                $columns[] = $rows->Field; //public 'Field' => string 'id' (length=2)                $rows->Type; //public 'Type' => string 'char(32)' (length=8)                $rows->Null; //public 'Null' => string 'NO' (length=2)                $rows->Key; //public 'Key' => string 'PRI' (length=3)                $rows->Default; //public 'Default' => null                $rows->Extra; //public 'Extra' => string '' (length=0)            }            return $columns;        } else {            return false;        }    }    public function renderTh(Array $select = null) {        return $this->html->headTh($this->showColumns(), $select);    }    public function renderList(Array $select = null) {        if (is_array($select)) {            $alias = "";            $as = "";            $fields = "";            $where = "";            $group_by = "";            $order_by = "";            $limit = "";            $joins = "";                        if(isset($select['table']) || $select['table'] != NULL ){                $table = "`" . $select['table'] . "`";                $matriz_name = $select['table'];            } else {                $table = "`{$this->_tabela}`";                $matriz_name = $select['table'];            }            if (isset($select['alias']) || $select['alias'] != NULL) {                $alias = "`" . $select['alias'] . "`.";                $as = "AS " . $select['alias'];            } else {                $alias = "";                $as = "";            }            if (isset($select['fields']) || $select['fields'] != NULL) {                if (is_array($select['fields'])) {                    $fields = $alias . implode(", " . $alias, array_values($select['fields']));                } else {                    $fields = $alias . $select['fields'];                }            } else {                $fields = $alias . "*";            }            if (isset($select['where']) || $select['where'] != NULL) {                $where = $select['where'];            }            if (isset($select['group_by']) || $select['group_by'] != NULL) {                $group_by = "GROUP BY " . $alias . $select['group_by'];            }            if (isset($select['order_by']) || $select['order_by'] != NULL) {                if (is_array($select['order_by'])) {                    $order_by = "ORDER BY (" . $alias . implode(", " . $alias, array_values($select['order_by']['fields'])) . ") " . $select['order_by']['order'];                }            }            if (isset($select['limit']) || $select['limit'] != NULL) {                $limit = "LIMIT " . $select['limit'][0] . "," . $select['limit'][1];            }            if (isset($select['joins']) || $select['joins'] != NULL) {                if (is_array($select['joins'])) {                    foreach ($select['joins'] as $jns){                        $joins .= "{$jns['join']} JOIN {$jns['table']} AS {$jns['alias']} ON {$jns['conditions']} ";                    }                }                            }                    }        $q = $this->db->query("SELECT {$fields} FROM {$table} {$as} {$joins} {$where} {$group_by} {$order_by} {$limit}");        if ($q->rowCount()) {            while ($rows = $q->fetch(PDO::FETCH_OBJ)) {                $obj[$matriz_name][] = $rows;            }            return $obj;        } else {            return false;        }    }    public function insert(Array $dados) {        if (sizeof($dados) != 0 && $this->_tabela != "") {            $campos = "`" . implode("`,`", array_keys($dados)) . "`";            $valores = "'" . implode("','", array_values($dados)) . "'";            $this->db->query("INSERT INTO `{$this->_tabela}` ({$campos}) VALUES ({$valores});");            return true;        } else {            return false;        }    }    public function read($where = null, $group_by = null, $order_by = null, $limit = null) {        if ($this->_tabela != "") {            $where = ( $where != null ? "WHERE {$where}" : "");            $limit = ( $limit != null ? "{$limit}" : "");            $order_by = ( $order_by != null ? "{$order_by}" : "");            $group_by = ( $group_by != null ? "{$group_by}" : "");            $q = $this->db->query("SELECT * FROM `{$this->_tabela}` {$where} {$group_by} {$order_by} {$limit};");            if ($q->rowCount()) {                return $q->fetch(PDO::FETCH_OBJ);            } else {                return false;            }        } else {            return false;        }    }    public function read_list($where = null, $group_by = null, $order_by = null, $limit = null) {        if ($this->_tabela != "") {            $where = ( $where != null ? "WHERE {$where}" : "");            $limit = ( $limit != null ? "{$limit}" : "");            $order_by = ( $order_by != null ? "{$order_by}" : "");            $group_by = ( $group_by != null ? "{$group_by}" : "");            $q = $this->db->query("SELECT *, DATE_FORMAT( {$this->_tabela}.DTA, '%d/%m/%Y - %Hh%i' ) as DTA FROM `{$this->_tabela}` {$where} {$group_by} {$order_by} {$limit};");            if ($q->rowCount()) {                return $q;            } else {                return false;            }        } else {            return false;        }    }    public function update(Array $dados, $where = null) {        if (sizeof($dados) != 0 && $this->_tabela != "") {            foreach ($dados as $campo => $valor) {                $campos[] = "`{$campo}` = '{$valor}'";            }            if ($where != null) {                $where = "WHERE {$where};";            } else {                $where = ";";            }            $campos = implode(", ", $campos);            $this->db->query("UPDATE `{$this->_tabela}` SET {$campos} {$where}");            return true;        } else {            return false;        }    }    public function delete($where = null) {        if ($this->_tabela != "") {            $this->db->query("DELETE FROM `{$this->_tabela}` WHERE {$where};");        } else {            return false;        }    }    public function getTimestamp() {        $query = $this->db->query("SELECT NOW() as DTA");        $query->execute();        if ($query->rowCount()) {            while ($rows = $query->fetch(PDO::FETCH_OBJ)) {                return $rows->DTA;            }        } else {            return false;        }    }}